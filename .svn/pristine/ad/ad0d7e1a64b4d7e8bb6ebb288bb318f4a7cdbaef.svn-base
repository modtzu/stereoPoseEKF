/*
 * featureManager.cpp
 *
 *  Created on: Oct 12, 2016
 *      Author: xwong
 */

#include "featureManager.h"

featureManager::featureManager() {
	// TODO Auto-generated constructor stub
	covTh = 10;
	ptrFeature = new imgFtRelated(200, 3, 0.0001,10,1.6);
}

featureManager::featureManager(float covTh, int numOfFt) {

	this->covTh = covTh;
	ptrFeature = new imgFtRelated(numOfFt, 3, 0.0001,10,1.6);
}

int featureManager::initFeaturePair(cv::Mat imgL, cv::Mat imgR) {

	ptrFeature->getFeature(imgL,vctFt0L,des0,0);

	/// Establish key points correspondence in initial stereo pair with KLT tracker
	ptrFeature->trackFeature(imgL,imgR,vctFt0L,vctFt0R,vctReID,cv::Size(20,20));

	/// get SIFT descriptor for tracked feature
	ptrFeature->getDescriptorForPt(imgL,vctFt0L,des0);
	ptrFeature->getDescriptorForPt(imgR,vctFt0R,des1);

	/// descriptor matching for remove false track / outlier
	ptrFeature->matchFeature(imgL,imgR,vctFt0L,vctFt0R,Pt0,Pt1,des0,des1);

	arma::mat initCov(2,2);
	initCov.eye();

	int CS = vctFt0L.size();
	for(int i=0; i<CS; i++)
	{
		int k = CS - i - 1;
		arma::mat tCov = KLTU.kltCovLS(imgL0,imgR0,cv::Size(20,20),vctFt0L[k],vctFt0R[k],initCov,
															cv::Size(5,5),
															1.6);
		vctCovFt0L.push_back(initCov);
		vctCovFt0R.push_back(tCov);
	}

	imgL.copyTo(imgL0);
	imgR.copyTo(imgR0);

	return CS;
}

int featureManager::updateFeature(cv::Mat imgLt, cv::Mat imgRt,
		std::vector<int>& ejectID) {

		std::vector<cv::KeyPoint> vctFt1L, vctFt1R;
		std::vector<arma::mat> vctCovFt1L, vctCovFt1R;

		std::vector<int> rmvID;

		ptrFeature->trackFeature(imgL0,imgLt,vctFt0L,vctFt1L,rmvID,cv::Size(20,20));

		int ID2rmv = -1;

		if(!rmvID.empty())
			ID2rmv = 0;

		std::vector<int> rmvID2;

		/// Compute feature covariance and eject if uncertainty is large

		for(int k=0; k<vctFt1L.size(); k++)
		{
			if(ID2rmv >=0 && k == rmvID[ID2rmv])
			{
				ID2rmv++;
				rmvID2.push_back(rmvID[ID2rmv]);
				continue;
			}

			arma::mat initCov = vctCovFt0L[k];

			arma::mat tCov = KLTU.kltCovLS(imgL0,imgLt,cv::Size(20,20),vctFt0L[k],vctFt1L[k],initCov,
																cv::Size(5,5),
																1.6);

			arma::cx_vec eigVal;
			arma::cx_mat eigVec;

			arma::eig_gen(eigVal,eigVec,tCov);
			arma::mat eig = arma::real(eigVal);

			if(eig(0,0)>covTh || eig(1,0) > covTh || eig(0,0)<= 0|| eig(1,0)<=0)
			{
				rmvID2.push_back(k);
			}
			else
			{
				vctCovFt1L.push_back(tCov);
			}
		}


		rmvID.clear();
		ptrFeature->trackFeature(imgR0,imgRt,vctFt0R,vctFt1R,rmvID,cv::Size(20,20));

		int CS = vctFt1R.size();
		for(int k=0; k<CS; k++)
		{
			if(ID2rmv >=0 && k == rmvID[ID2rmv])
			{
				ID2rmv++;
				rmvID2.push_back(rmvID[ID2rmv]);
				continue;
			}

			arma::mat initCov = vctCovFt0L[k];

			arma::mat tCov = KLTU.kltCovLS(imgR0,imgRt,cv::Size(20,20),vctFt0R[k],vctFt1R[k],initCov,
																cv::Size(5,5),
																1.6);

			arma::cx_vec eigVal;
			arma::cx_mat eigVec;

			arma::eig_gen(eigVal,eigVec,tCov);
			arma::mat eig = arma::real(eigVal);

			if(eig(0,0)>covTh || eig(1,0) > covTh || eig(0,0)<= 0|| eig(1,0)<=0)
			{
				rmvID2.push_back(k);
			}
			else
			{
				vctCovFt1L.push_back(tCov);
			}
		}



}

void featureManager::getFeaturePair(std::vector<cv::KeyPoint>* ptrFtL,
		std::vector<cv::KeyPoint>* ptrFtR, std::vector<cv::KeyPoint>* ptrCovFtL,
		std::vector<cv::KeyPoint>* ptrCovFtR) {
}

featureManager::~featureManager() {
	// TODO Auto-generated destructor stub
}

